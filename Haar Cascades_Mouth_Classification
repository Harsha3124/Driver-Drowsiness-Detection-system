import cv2

# Load Haar Cascade for face and mouth detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
mouth_cascade = cv2.CascadeClassifier('path_to_haarcascade_mcs_mouth.xml')

# Initialize webcam
cap = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame from the webcam
    ret, frame = cap.read()

    # Convert the frame to grayscale (Haar Cascades require grayscale images)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        # Draw rectangle around the face
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

        # Region of interest for the face
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = frame[y:y+h, x:x+w]

        # Detect the mouth within the face region
        mouths = mouth_cascade.detectMultiScale(roi_gray, 1.7, 11)

        # Draw rectangle around the mouth
        for (mx, my, mw, mh) in mouths:
            # The mouth is generally in the lower part of the face, so you can filter it
            if my > h / 2:  # Only consider the lower half of the face
                cv2.rectangle(roi_color, (mx, my), (mx+mw, my+mh), (0, 255, 0), 2)
                break  # Only consider the first detected mouth

    # Display the output frame with face and mouth detection
    cv2.imshow('Mouth Detection', frame)

    # Press 'q' to quit the video stream
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close all windows
cap.release()
cv2.destroyAllWindows()
